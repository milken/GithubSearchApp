apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

// for @Parcel annotation
androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.milken.githubsearchapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

allOpen {
    annotation "com.example.milken.githubsearchapp.di.OpenClass"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:2.5.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.5.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.5.0"
    implementation("com.squareup.moshi:moshi-kotlin:1.8.0")
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.8.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'

    // RX
    implementation "io.reactivex.rxjava2:rxjava:2.2.4"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.2.0'

    // UTILS
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation ("com.github.bumptech.glide:glide:4.8.0") {
        exclude group: "com.android.support"
    }
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    //TEST - MOCKK
    testImplementation "io.mockk:mockk:1.8.13"

    // DAGGER
    testImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'
    implementation 'com.google.dagger:dagger:2.15'
    kapt 'com.google.dagger:dagger-android-processor:2.15'
    kapt 'com.google.dagger:dagger-compiler:2.15'
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.15'
    kaptAndroidTest 'com.google.dagger:dagger-android-processor:2.15'

    // ANDROID TEST
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation "org.mockito:mockito-android:2.19.1"

    // JUNIT
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.1")

    // (Optional) If you need "Parameterized Tests"
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.1")

    // (Optional) If you also have JUnit 4-based tests
    testImplementation("junit:junit:4.12")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.3.1")
}
